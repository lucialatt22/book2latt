// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   // 'admin' | 'production' | 'staff'
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("product_categories")
}

model Product {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  imageUrl    String               @map("image_url")
  categoryId  Int                  @map("category_id")
  category    ProductCategory      @relation(fields: [categoryId], references: [id])
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  specs       ProductSpecification[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductSpecification {
  id                Int     @id @default(autoincrement())
  productId         Int     @map("product_id")
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  specificationKey  String  @map("specification_key")
  specificationValue String  @map("specification_value")

  @@map("product_specifications")
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String?     @map("customer_name")
  orderType   String      @map("order_type") // 'store' | 'customer'
  status      String      // 'pending' | 'in_production' | 'completed' | 'cancelled'
  dueDate     DateTime    @map("due_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  notes     String?

  @@map("order_items")
}
